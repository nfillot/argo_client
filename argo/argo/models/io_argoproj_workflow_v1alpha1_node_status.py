# coding: utf-8

"""
    Argo

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from argo.models.io_argoproj_workflow_v1alpha1_inputs import IoArgoprojWorkflowV1alpha1Inputs  # noqa: F401,E501
from argo.models.io_argoproj_workflow_v1alpha1_outputs import IoArgoprojWorkflowV1alpha1Outputs  # noqa: F401,E501
from argo.models.io_k8s_apimachinery_pkg_apis_meta_v1_time import IoK8sApimachineryPkgApisMetaV1Time  # noqa: F401,E501


class IoArgoprojWorkflowV1alpha1NodeStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boundary_id': 'str',
        'children': 'list[str]',
        'daemoned': 'bool',
        'display_name': 'str',
        'finished_at': 'IoK8sApimachineryPkgApisMetaV1Time',
        'id': 'str',
        'inputs': 'IoArgoprojWorkflowV1alpha1Inputs',
        'message': 'str',
        'name': 'str',
        'outbound_nodes': 'list[str]',
        'outputs': 'IoArgoprojWorkflowV1alpha1Outputs',
        'phase': 'str',
        'pod_ip': 'str',
        'started_at': 'IoK8sApimachineryPkgApisMetaV1Time',
        'template_name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'boundary_id': 'boundaryID',
        'children': 'children',
        'daemoned': 'daemoned',
        'display_name': 'displayName',
        'finished_at': 'finishedAt',
        'id': 'id',
        'inputs': 'inputs',
        'message': 'message',
        'name': 'name',
        'outbound_nodes': 'outboundNodes',
        'outputs': 'outputs',
        'phase': 'phase',
        'pod_ip': 'podIP',
        'started_at': 'startedAt',
        'template_name': 'templateName',
        'type': 'type'
    }

    def __init__(self, boundary_id=None, children=None, daemoned=None, display_name=None, finished_at=None, id=None, inputs=None, message=None, name=None, outbound_nodes=None, outputs=None, phase=None, pod_ip=None, started_at=None, template_name=None, type=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1NodeStatus - a model defined in Swagger"""  # noqa: E501
        self._boundary_id = None
        self._children = None
        self._daemoned = None
        self._display_name = None
        self._finished_at = None
        self._id = None
        self._inputs = None
        self._message = None
        self._name = None
        self._outbound_nodes = None
        self._outputs = None
        self._phase = None
        self._pod_ip = None
        self._started_at = None
        self._template_name = None
        self._type = None
        self.discriminator = None
        if boundary_id is not None:
            self.boundary_id = boundary_id
        if children is not None:
            self.children = children
        if daemoned is not None:
            self.daemoned = daemoned
        self.display_name = display_name
        if finished_at is not None:
            self.finished_at = finished_at
        self.id = id
        if inputs is not None:
            self.inputs = inputs
        if message is not None:
            self.message = message
        self.name = name
        if outbound_nodes is not None:
            self.outbound_nodes = outbound_nodes
        if outputs is not None:
            self.outputs = outputs
        if phase is not None:
            self.phase = phase
        if pod_ip is not None:
            self.pod_ip = pod_ip
        if started_at is not None:
            self.started_at = started_at
        if template_name is not None:
            self.template_name = template_name
        self.type = type

    @property
    def boundary_id(self):
        """Gets the boundary_id of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        BoundaryID indicates the node ID of the associated template root node in which this node belongs to  # noqa: E501

        :return: The boundary_id of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._boundary_id

    @boundary_id.setter
    def boundary_id(self, boundary_id):
        """Sets the boundary_id of this IoArgoprojWorkflowV1alpha1NodeStatus.

        BoundaryID indicates the node ID of the associated template root node in which this node belongs to  # noqa: E501

        :param boundary_id: The boundary_id of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: str
        """

        self._boundary_id = boundary_id

    @property
    def children(self):
        """Gets the children of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        Children is a list of child node IDs  # noqa: E501

        :return: The children of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this IoArgoprojWorkflowV1alpha1NodeStatus.

        Children is a list of child node IDs  # noqa: E501

        :param children: The children of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: list[str]
        """

        self._children = children

    @property
    def daemoned(self):
        """Gets the daemoned of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        Daemoned tracks whether or not this node was daemoned and need to be terminated  # noqa: E501

        :return: The daemoned of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: bool
        """
        return self._daemoned

    @daemoned.setter
    def daemoned(self, daemoned):
        """Sets the daemoned of this IoArgoprojWorkflowV1alpha1NodeStatus.

        Daemoned tracks whether or not this node was daemoned and need to be terminated  # noqa: E501

        :param daemoned: The daemoned of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: bool
        """

        self._daemoned = daemoned

    @property
    def display_name(self):
        """Gets the display_name of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        DisplayName is a human readable representation of the node. Unique within a template boundary  # noqa: E501

        :return: The display_name of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IoArgoprojWorkflowV1alpha1NodeStatus.

        DisplayName is a human readable representation of the node. Unique within a template boundary  # noqa: E501

        :param display_name: The display_name of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def finished_at(self):
        """Gets the finished_at of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501


        :return: The finished_at of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1Time
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this IoArgoprojWorkflowV1alpha1NodeStatus.


        :param finished_at: The finished_at of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: IoK8sApimachineryPkgApisMetaV1Time
        """

        self._finished_at = finished_at

    @property
    def id(self):
        """Gets the id of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        ID is a unique identifier of a node within the worklow It is implemented as a hash of the node name, which makes the ID deterministic  # noqa: E501

        :return: The id of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IoArgoprojWorkflowV1alpha1NodeStatus.

        ID is a unique identifier of a node within the worklow It is implemented as a hash of the node name, which makes the ID deterministic  # noqa: E501

        :param id: The id of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def inputs(self):
        """Gets the inputs of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501


        :return: The inputs of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1Inputs
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this IoArgoprojWorkflowV1alpha1NodeStatus.


        :param inputs: The inputs of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1Inputs
        """

        self._inputs = inputs

    @property
    def message(self):
        """Gets the message of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        A human readable message indicating details about why the node is in this condition.  # noqa: E501

        :return: The message of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this IoArgoprojWorkflowV1alpha1NodeStatus.

        A human readable message indicating details about why the node is in this condition.  # noqa: E501

        :param message: The message of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        Name is unique name in the node tree used to generate the node ID  # noqa: E501

        :return: The name of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoArgoprojWorkflowV1alpha1NodeStatus.

        Name is unique name in the node tree used to generate the node ID  # noqa: E501

        :param name: The name of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def outbound_nodes(self):
        """Gets the outbound_nodes of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        OutboundNodes tracks the node IDs which are considered \"outbound\" nodes to a template invocation. For every invocation of a template, there are nodes which we considered as \"outbound\". Essentially, these are last nodes in the execution sequence to run, before the template is considered completed. These nodes are then connected as parents to a following step.  In the case of single pod steps (i.e. container, script, resource templates), this list will be nil since the pod itself is already considered the \"outbound\" node. In the case of DAGs, outbound nodes are the \"target\" tasks (tasks with no children). In the case of steps, outbound nodes are all the containers involved in the last step group. NOTE: since templates are composable, the list of outbound nodes are carried upwards when a DAG/steps template invokes another DAG/steps template. In other words, the outbound nodes of a template, will be a superset of the outbound nodes of its last children.  # noqa: E501

        :return: The outbound_nodes of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._outbound_nodes

    @outbound_nodes.setter
    def outbound_nodes(self, outbound_nodes):
        """Sets the outbound_nodes of this IoArgoprojWorkflowV1alpha1NodeStatus.

        OutboundNodes tracks the node IDs which are considered \"outbound\" nodes to a template invocation. For every invocation of a template, there are nodes which we considered as \"outbound\". Essentially, these are last nodes in the execution sequence to run, before the template is considered completed. These nodes are then connected as parents to a following step.  In the case of single pod steps (i.e. container, script, resource templates), this list will be nil since the pod itself is already considered the \"outbound\" node. In the case of DAGs, outbound nodes are the \"target\" tasks (tasks with no children). In the case of steps, outbound nodes are all the containers involved in the last step group. NOTE: since templates are composable, the list of outbound nodes are carried upwards when a DAG/steps template invokes another DAG/steps template. In other words, the outbound nodes of a template, will be a superset of the outbound nodes of its last children.  # noqa: E501

        :param outbound_nodes: The outbound_nodes of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: list[str]
        """

        self._outbound_nodes = outbound_nodes

    @property
    def outputs(self):
        """Gets the outputs of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501


        :return: The outputs of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1Outputs
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this IoArgoprojWorkflowV1alpha1NodeStatus.


        :param outputs: The outputs of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1Outputs
        """

        self._outputs = outputs

    @property
    def phase(self):
        """Gets the phase of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        Phase a simple, high-level summary of where the node is in its lifecycle. Can be used as a state machine.  # noqa: E501

        :return: The phase of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this IoArgoprojWorkflowV1alpha1NodeStatus.

        Phase a simple, high-level summary of where the node is in its lifecycle. Can be used as a state machine.  # noqa: E501

        :param phase: The phase of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def pod_ip(self):
        """Gets the pod_ip of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        PodIP captures the IP of the pod for daemoned steps  # noqa: E501

        :return: The pod_ip of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._pod_ip

    @pod_ip.setter
    def pod_ip(self, pod_ip):
        """Sets the pod_ip of this IoArgoprojWorkflowV1alpha1NodeStatus.

        PodIP captures the IP of the pod for daemoned steps  # noqa: E501

        :param pod_ip: The pod_ip of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: str
        """

        self._pod_ip = pod_ip

    @property
    def started_at(self):
        """Gets the started_at of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501


        :return: The started_at of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1Time
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this IoArgoprojWorkflowV1alpha1NodeStatus.


        :param started_at: The started_at of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: IoK8sApimachineryPkgApisMetaV1Time
        """

        self._started_at = started_at

    @property
    def template_name(self):
        """Gets the template_name of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        TemplateName is the template name which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)  # noqa: E501

        :return: The template_name of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this IoArgoprojWorkflowV1alpha1NodeStatus.

        TemplateName is the template name which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)  # noqa: E501

        :param template_name: The template_name of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def type(self):
        """Gets the type of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501

        Type indicates type of node  # noqa: E501

        :return: The type of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IoArgoprojWorkflowV1alpha1NodeStatus.

        Type indicates type of node  # noqa: E501

        :param type: The type of this IoArgoprojWorkflowV1alpha1NodeStatus.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1NodeStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1NodeStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
